//go:build bench
// +build bench

// Code generated by xdrgen. DO NOT EDIT.
// Source: /Users/m/skratch/go-xdr/benchmarks/benchmark_test.go
// Generated 2 XDR types

package xdr_bench

import (
	"fmt"
	"github.com/tempusfrangit/go-xdr"
)

func (v *MemBenchResult) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeUint32(uint32(v.Status)); err != nil {
		return fmt.Errorf("failed to encode Status: %w", err)
	}

	// Switch based on key for union field Data
	switch v.Status {

	default:
		// unknown key - encode nothing

	}

	return nil
}

func (v *MemBenchResult) Decode(dec *xdr.Decoder) error {

	tempStatus, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode Status: %w", err)
	}
	v.Status = MemBenchStatus(tempStatus)

	// Switch based on key for union field Data
	switch v.Status {

	default:
		// unknown key - decode nothing

	}

	return nil
}

var _ xdr.Codec = (*MemBenchResult)(nil)

func (v *MemBenchSuccessResult) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeString(v.Message); err != nil {
		return fmt.Errorf("failed to encode Message: %w", err)
	}

	if err := enc.EncodeBytes(v.Details); err != nil {
		return fmt.Errorf("failed to encode Details: %w", err)
	}

	return nil
}

func (v *MemBenchSuccessResult) Decode(dec *xdr.Decoder) error {

	tempMessage, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode Message: %w", err)
	}
	v.Message = tempMessage

	tempDetails, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode Details: %w", err)
	}
	v.Details = tempDetails

	return nil
}

var _ xdr.Codec = (*MemBenchSuccessResult)(nil)
