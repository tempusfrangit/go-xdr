for i := range v.{{.FieldName}} {
	{{if .ElementIsStruct}}
	if err := v.{{.FieldName}}[i].Decode(dec); err != nil {
		return fmt.Errorf("failed to decode element: %w", err)
	}
	{{else if eq .ElementType "string"}}
	val, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode element: %w", err)
	}
	v.{{.FieldName}}[i] = val
	{{else if eq .ElementType "uint32"}}
	val, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode element: %w", err)
	}
	v.{{.FieldName}}[i] = val
	{{else if eq .ElementType "uint64"}}
	val, err := dec.DecodeUint64()
	if err != nil {
		return fmt.Errorf("failed to decode element: %w", err)
	}
	v.{{.FieldName}}[i] = val
	{{else if eq .ElementType "int32"}}
	val, err := dec.DecodeInt32()
	if err != nil {
		return fmt.Errorf("failed to decode element: %w", err)
	}
	v.{{.FieldName}}[i] = val
	{{else if eq .ElementType "int64"}}
	val, err := dec.DecodeInt64()
	if err != nil {
		return fmt.Errorf("failed to decode element: %w", err)
	}
	v.{{.FieldName}}[i] = val
	{{else if eq .ElementType "bool"}}
	val, err := dec.DecodeBool()
	if err != nil {
		return fmt.Errorf("failed to decode element: %w", err)
	}
	v.{{.FieldName}}[i] = val
	{{else if eq .ElementType "byte"}}
	val, err := dec.DecodeByte()
	if err != nil {
		return fmt.Errorf("failed to decode element: %w", err)
	}
	v.{{.FieldName}}[i] = val
	{{else if eq .ElementType "[]byte"}}
	val, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode element: %w", err)
	}
	v.{{.FieldName}}[i] = val
	{{else}}
	// Element type {{.ElementType}} - delegate to element's Decode method
	if err := v.{{.FieldName}}[i].Decode(dec); err != nil {
		return fmt.Errorf("failed to decode element: %w", err)
	}
	{{end}}
	}