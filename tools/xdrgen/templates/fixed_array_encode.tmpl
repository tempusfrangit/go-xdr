for _, elem := range v.{{.FieldName}} {
	{{if .ElementIsStruct}}
	if err := elem.Encode(enc); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ElementType "string"}}
	if err := enc.EncodeString(elem); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ElementType "uint32"}}
	if err := enc.EncodeUint32(uint32(elem)); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ElementType "uint64"}}
	if err := enc.EncodeUint64(uint64(elem)); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ElementType "int32"}}
	if err := enc.EncodeInt32(int32(elem)); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ElementType "int64"}}
	if err := enc.EncodeInt64(int64(elem)); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ElementType "bool"}}
	if err := enc.EncodeBool(bool(elem)); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ElementType "[]byte"}}
	if err := enc.EncodeBytes(elem); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ElementType "byte"}}
	if err := enc.EncodeFixedBytes(elem[:]); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else}}
	// Element type {{.ElementType}} - delegate to element's Encode method
	if err := elem.Encode(enc); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{end}}
	}