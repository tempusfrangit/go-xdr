// #nosec G115
	if err := enc.EncodeUint32(uint32(len(v.{{.FieldName}}))); err != nil {
		return fmt.Errorf("failed to encode {{.FieldName}} length: %w", err)
	}
for _, elem := range v.{{.FieldName}} {
	{{if .ElementIsStruct}}
	{{if .ParentHasLoops}}
	if err := elem.EncodeWithContext(enc, encodingSet); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else}}
	if err := elem.Encode(enc); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{end}}
	{{else if eq .ResolvedElementType "string"}}
	if err := enc.EncodeString({{if ne .ElementType .ResolvedElementType}}string(elem){{else}}elem{{end}}); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ResolvedElementType "uint32"}}
	if err := enc.EncodeUint32({{if ne .ElementType .ResolvedElementType}}uint32(elem){{else}}elem{{end}}); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ResolvedElementType "uint64"}}
	if err := enc.EncodeUint64({{if ne .ElementType .ResolvedElementType}}uint64(elem){{else}}elem{{end}}); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ResolvedElementType "int32"}}
	if err := enc.EncodeInt32({{if ne .ElementType .ResolvedElementType}}int32(elem){{else}}elem{{end}}); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ResolvedElementType "int64"}}
	if err := enc.EncodeInt64({{if ne .ElementType .ResolvedElementType}}int64(elem){{else}}elem{{end}}); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ResolvedElementType "bool"}}
	if err := enc.EncodeBool({{if ne .ElementType .ResolvedElementType}}bool(elem){{else}}elem{{end}}); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ResolvedElementType "byte"}}
	if err := enc.EncodeByte({{if ne .ElementType .ResolvedElementType}}byte(elem){{else}}elem{{end}}); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if eq .ResolvedElementType "[]byte"}}
	if err := enc.EncodeBytes({{if ne .ElementType .ResolvedElementType}}[]byte(elem){{else}}elem{{end}}); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else if hasPrefix .ResolvedElementType "["}}{{/* Fixed-size byte arrays like [16]byte */}}
	if err := enc.EncodeFixedBytes(elem[:]); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else}}
	// Element type {{.ElementType}} - delegate to element's Encode method if available
	{{if .ParentHasLoops}}
	if err := elem.EncodeWithContext(enc, encodingSet); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{else}}
	if err := elem.Encode(enc); err != nil {
		return fmt.Errorf("failed to encode element: %w", err)
	}
	{{end}}
	{{end}}
	}