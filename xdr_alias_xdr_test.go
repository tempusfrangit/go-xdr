// Code generated by go generate. DO NOT EDIT.
// Source: xdr_alias_test.go
// Generated at: 2025-07-11T06:47:12-07:00

package xdr_test

import (
	"fmt"

	"github.com/tempusfrangit/go-xdr"
)

func (v *TestUser) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeString(string(v.ID)); err != nil {
	return fmt.Errorf("failed to encode ID: %w", err)
}

	if err := enc.EncodeBytes([]byte(v.Session)); err != nil {
	return fmt.Errorf("failed to encode Session: %w", err)
}

	if err := enc.EncodeUint32(uint32(v.Status)); err != nil {
	return fmt.Errorf("failed to encode Status: %w", err)
}

	if err := enc.EncodeUint64(uint64(v.Flags)); err != nil {
	return fmt.Errorf("failed to encode Flags: %w", err)
}

	if err := enc.EncodeInt32(int32(v.Priority)); err != nil {
	return fmt.Errorf("failed to encode Priority: %w", err)
}

	if err := enc.EncodeInt64(int64(v.Created)); err != nil {
	return fmt.Errorf("failed to encode Created: %w", err)
}

	if err := enc.EncodeBool(bool(v.Active)); err != nil {
	return fmt.Errorf("failed to encode Active: %w", err)
}

	return nil
}
func (v *TestUser) Decode(dec *xdr.Decoder) error {

	IDTmp, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode ID: %w", err)
	}
		v.ID = TestUserID(IDTmp)

	SessionTmp, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode Session: %w", err)
	}
		v.Session = TestSessionID(SessionTmp)

	StatusTmp, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode Status: %w", err)
	}
		v.Status = TestStatusCode(StatusTmp)

	FlagsTmp, err := dec.DecodeUint64()
	if err != nil {
		return fmt.Errorf("failed to decode Flags: %w", err)
	}
		v.Flags = TestFlags(FlagsTmp)

	PriorityTmp, err := dec.DecodeInt32()
	if err != nil {
		return fmt.Errorf("failed to decode Priority: %w", err)
	}
		v.Priority = TestPriority(PriorityTmp)

	CreatedTmp, err := dec.DecodeInt64()
	if err != nil {
		return fmt.Errorf("failed to decode Created: %w", err)
	}
		v.Created = TestTimestamp(CreatedTmp)

	ActiveTmp, err := dec.DecodeBool()
	if err != nil {
		return fmt.Errorf("failed to decode Active: %w", err)
	}
		v.Active = TestIsActive(ActiveTmp)

	return nil
}
// Compile-time assertion that TestUser implements xdr.Codec
var _ xdr.Codec = (*TestUser)(nil)
