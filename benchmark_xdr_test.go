
//go:build bench
// +build bench


// Code generated by xdrgen. DO NOT EDIT.
// Source: /Users/m/skratch/go-xdr/benchmark_test.go
// Generated: 2025-07-12T15:20:42-07:00

package xdr_test

import (
	"fmt"
	"github.com/tempusfrangit/go-xdr"
	
)

func (v *MemBenchResult) Encode(enc *xdr.Encoder) error {
	
	if err := enc.EncodeUint32(uint32(v.Status)); err != nil {
	return fmt.Errorf("failed to encode Status: %w", err)
}
	
	switch v.Status {

case MemBenchStatusSuccess:
	if err := enc.EncodeBytes(v.Data); err != nil {
	return fmt.Errorf("failed to encode Data: %w", err)
}

case MemBenchStatusError:
	// Void case - no data to encode/decode

case MemBenchStatusPending:
	// Void case - no data to encode/decode

default:
	return fmt.Errorf("unsupported Status value: %v", v.Status)
}
	
	return nil
}

func (v *MemBenchResult) Decode(dec *xdr.Decoder) error {
	
	tempStatus, err := dec.DecodeUint32()
if err != nil {
	return fmt.Errorf("failed to decode Status: %w", err)
}
v.Status = MemBenchStatus(tempStatus)
	
	switch v.Status {

case MemBenchStatusSuccess:
	data, err := dec.DecodeBytes()
if err != nil {
	return fmt.Errorf("failed to decode Data: %w", err)
}
v.Data = data

case MemBenchStatusError:
	// Void case - no data to encode/decode

case MemBenchStatusPending:
	// Void case - no data to encode/decode

default:
	return fmt.Errorf("unsupported Status value: %v", v.Status)
}
	
	return nil
}

var _ xdr.Codec = (*MemBenchResult)(nil)

func (v *MemBenchSuccessResult) Encode(enc *xdr.Encoder) error {
	
	if err := enc.EncodeString(v.Message); err != nil {
	return fmt.Errorf("failed to encode Message: %w", err)
}
	
	if err := enc.EncodeBytes(v.Details); err != nil {
	return fmt.Errorf("failed to encode Details: %w", err)
}
	
	return nil
}

func (v *MemBenchSuccessResult) Decode(dec *xdr.Decoder) error {
	
	tempMessage, err := dec.DecodeString()
if err != nil {
	return fmt.Errorf("failed to decode Message: %w", err)
}
v.Message = tempMessage
	
	tempDetails, err := dec.DecodeBytes()
if err != nil {
	return fmt.Errorf("failed to decode Details: %w", err)
}
v.Details = tempDetails
	
	return nil
}

var _ xdr.Codec = (*MemBenchSuccessResult)(nil)

