// Code generated by xdrgen. DO NOT EDIT.
// Source: /Users/m/skratch/go-xdr/codegen_test/basic_test.go
// Generated: 2025-07-18T08:56:08-07:00

package codegen_test

import (
	"fmt"
	"github.com/tempusfrangit/go-xdr"
)

func (v *Operation) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeUint32(uint32(v.OpCode)); err != nil {
		return fmt.Errorf("failed to encode OpCode: %w", err)
	}

	// Switch based on key for union field Result
	switch v.OpCode {

	default:
		// unknown key - encode nothing

	}

	return nil
}
func (v *Operation) Decode(dec *xdr.Decoder) error {

	tempOpCode, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode OpCode: %w", err)
	}
	v.OpCode = OpCode(tempOpCode)

	// Switch based on key for union field Result
	switch v.OpCode {

	default:
		// unknown key - decode nothing

	}

	return nil
}

var _ xdr.Codec = (*Operation)(nil)

func (v *TestUser) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeString(string(v.ID)); err != nil {
		return fmt.Errorf("failed to encode ID: %w", err)
	}

	if err := enc.EncodeBytes([]byte(v.Session)); err != nil {
		return fmt.Errorf("failed to encode Session: %w", err)
	}

	if err := enc.EncodeUint32(uint32(v.Status)); err != nil {
		return fmt.Errorf("failed to encode Status: %w", err)
	}

	if err := enc.EncodeUint64(uint64(v.Flags)); err != nil {
		return fmt.Errorf("failed to encode Flags: %w", err)
	}

	if err := enc.EncodeInt32(int32(v.Priority)); err != nil {
		return fmt.Errorf("failed to encode Priority: %w", err)
	}

	if err := enc.EncodeInt64(int64(v.Created)); err != nil {
		return fmt.Errorf("failed to encode Created: %w", err)
	}

	if err := enc.EncodeBool(bool(v.Active)); err != nil {
		return fmt.Errorf("failed to encode Active: %w", err)
	}

	if err := enc.EncodeBytes(v.Hash[:]); err != nil {
		return fmt.Errorf("failed to encode Hash: %w", err)
	}

	return nil
}
func (v *TestUser) Decode(dec *xdr.Decoder) error {

	tempID, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode ID: %w", err)
	}
	v.ID = TestUserID(tempID)

	tempSession, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode Session: %w", err)
	}
	v.Session = TestSessionID(tempSession)

	tempStatus, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode Status: %w", err)
	}
	v.Status = TestStatusCode(tempStatus)

	tempFlags, err := dec.DecodeUint64()
	if err != nil {
		return fmt.Errorf("failed to decode Flags: %w", err)
	}
	v.Flags = TestFlags(tempFlags)

	tempPriority, err := dec.DecodeInt32()
	if err != nil {
		return fmt.Errorf("failed to decode Priority: %w", err)
	}
	v.Priority = TestPriority(tempPriority)

	tempCreated, err := dec.DecodeInt64()
	if err != nil {
		return fmt.Errorf("failed to decode Created: %w", err)
	}
	v.Created = TestTimestamp(tempCreated)

	tempActive, err := dec.DecodeBool()
	if err != nil {
		return fmt.Errorf("failed to decode Active: %w", err)
	}
	v.Active = TestIsActive(tempActive)

	tempHash, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode Hash: %w", err)
	}
	v.Hash = TestHash(tempHash)

	return nil
}

var _ xdr.Codec = (*TestUser)(nil)

func (v *TestCrossFileReference) Encode(enc *xdr.Encoder) error {

	if err := v.CrossFileData.Encode(enc); err != nil {
		return fmt.Errorf("failed to encode CrossFileData: %w", err)
	}

	if err := enc.EncodeUint32(uint32(len(v.Items))); err != nil {
		return fmt.Errorf("failed to encode Items length: %w", err)
	}
	for _, elem := range v.Items {

		// Element type CrossFileStruct - delegate to element's Encode method if available
		if err := elem.Encode(enc); err != nil {
			return fmt.Errorf("failed to encode element: %w", err)
		}

	}

	return nil
}
func (v *TestCrossFileReference) Decode(dec *xdr.Decoder) error {

	if err := v.CrossFileData.Decode(dec); err != nil {
		return fmt.Errorf("failed to decode CrossFileData: %w", err)
	}

	ItemsLen, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode Items length: %w", err)
	}
	v.Items = make([]CrossFileStruct, ItemsLen)
	for i := range v.Items {

		// Element type CrossFileStruct - delegate to element's Decode method if available
		if err := v.Items[i].Decode(dec); err != nil {
			return fmt.Errorf("failed to decode element: %w", err)
		}

	}

	return nil
}

var _ xdr.Codec = (*TestCrossFileReference)(nil)

func (v *VoidOperation) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeUint32(uint32(v.OpCode)); err != nil {
		return fmt.Errorf("failed to encode OpCode: %w", err)
	}

	// Switch based on key for union field Data
	switch v.OpCode {

	default:
		// unknown key - encode nothing

	}

	return nil
}
func (v *VoidOperation) Decode(dec *xdr.Decoder) error {

	tempOpCode, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode OpCode: %w", err)
	}
	v.OpCode = VoidOpCode(tempOpCode)

	// Switch based on key for union field Data
	switch v.OpCode {

	default:
		// unknown key - decode nothing

	}

	return nil
}

var _ xdr.Codec = (*VoidOperation)(nil)
