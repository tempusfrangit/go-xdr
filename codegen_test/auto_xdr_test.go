//go:build ignore

// Code generated by xdrgen. DO NOT EDIT.
// Source: /Users/m/skratch/go-xdr/codegen_test/auto_test.go
// Generated: 2025-07-20T11:35:03-07:00

package codegen_test

import (
	"fmt"
	"github.com/tempusfrangit/go-xdr"
)

func (v *AutoInferenceTest) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeUint32(v.ID); err != nil {
		return fmt.Errorf("failed to encode ID: %w", err)
	}

	if err := enc.EncodeString(v.Name); err != nil {
		return fmt.Errorf("failed to encode Name: %w", err)
	}

	if err := enc.EncodeBytes(v.Data); err != nil {
		return fmt.Errorf("failed to encode Data: %w", err)
	}

	if err := enc.EncodeInt64(v.Count); err != nil {
		return fmt.Errorf("failed to encode Count: %w", err)
	}

	if err := enc.EncodeBool(v.Active); err != nil {
		return fmt.Errorf("failed to encode Active: %w", err)
	}

	// #nosec G115
	if err := enc.EncodeUint32(uint32(len(v.Values))); err != nil {
		return fmt.Errorf("failed to encode Values length: %w", err)
	}
	for _, elem := range v.Values {

		if err := enc.EncodeUint32(elem); err != nil {
			return fmt.Errorf("failed to encode element: %w", err)
		}

	}

	if err := enc.EncodeFixedBytes(v.Hash[:]); err != nil {
		return fmt.Errorf("failed to encode Hash: %w", err)
	}

	return nil
}
func (v *AutoInferenceTest) Decode(dec *xdr.Decoder) error {

	tempID, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode ID: %w", err)
	}
	v.ID = tempID

	tempName, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode Name: %w", err)
	}
	v.Name = tempName

	tempData, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode Data: %w", err)
	}
	v.Data = tempData

	tempCount, err := dec.DecodeInt64()
	if err != nil {
		return fmt.Errorf("failed to decode Count: %w", err)
	}
	v.Count = tempCount

	tempActive, err := dec.DecodeBool()
	if err != nil {
		return fmt.Errorf("failed to decode Active: %w", err)
	}
	v.Active = tempActive

	ValuesLen, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode Values length: %w", err)
	}
	v.Values = make([]uint32, ValuesLen)
	for i := range v.Values {

		val, err := dec.DecodeUint32()
		if err != nil {
			return fmt.Errorf("failed to decode element: %w", err)
		}
		v.Values[i] = val

	}

	if err := dec.DecodeFixedBytesInto(v.Hash[:]); err != nil {
		return fmt.Errorf("failed to decode Hash: %w", err)
	}

	return nil
}

var _ xdr.Codec = (*AutoInferenceTest)(nil)
