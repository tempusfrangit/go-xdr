// Code generated by xdrgen. DO NOT EDIT.
// Source: /Users/m/skratch/go-xdr/codegen_test/cross_package_alias_test.go
// Generated: 2025-07-18T14:21:46-07:00

package codegen_test

import (
	"fmt"
	"github.com/tempusfrangit/go-xdr"

	"github.com/tempusfrangit/go-xdr/codegen_test/alt_pkg"
)

func (v *CrossPackageTest) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeUint32(v.ID); err != nil {
		return fmt.Errorf("failed to encode ID: %w", err)
	}

	if err := enc.EncodeBytes([]byte(v.Data)); err != nil {
		return fmt.Errorf("failed to encode Data: %w", err)
	}

	if err := enc.EncodeString(string(v.Name)); err != nil {
		return fmt.Errorf("failed to encode Name: %w", err)
	}

	if err := enc.EncodeBytes([]byte(v.TrueBytes)); err != nil {
		return fmt.Errorf("failed to encode TrueBytes: %w", err)
	}

	if err := enc.EncodeString(string(v.TrueString)); err != nil {
		return fmt.Errorf("failed to encode TrueString: %w", err)
	}

	if err := enc.EncodeBytes([]byte(v.Direct)); err != nil {
		return fmt.Errorf("failed to encode Direct: %w", err)
	}

	if err := enc.EncodeString(string(v.Another)); err != nil {
		return fmt.Errorf("failed to encode Another: %w", err)
	}

	if err := v.MyInterface.Encode(enc); err != nil {
		return fmt.Errorf("failed to encode MyInterface: %w", err)
	}

	if err := enc.EncodeString(string(v.MultiDepth)); err != nil {
		return fmt.Errorf("failed to encode MultiDepth: %w", err)
	}

	if err := v.ExportedPrivate.Encode(enc); err != nil {
		return fmt.Errorf("failed to encode ExportedPrivate: %w", err)
	}

	return nil
}
func (v *CrossPackageTest) Decode(dec *xdr.Decoder) error {

	tempID, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode ID: %w", err)
	}
	v.ID = tempID

	tempData, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode Data: %w", err)
	}
	v.Data = AliasToMyBytes(tempData)

	tempName, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode Name: %w", err)
	}
	v.Name = AliasToMyString(tempName)

	tempTrueBytes, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode TrueBytes: %w", err)
	}
	v.TrueBytes = TrueAliasBytes(tempTrueBytes)

	tempTrueString, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode TrueString: %w", err)
	}
	v.TrueString = TrueAliasString(tempTrueString)

	tempDirect, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode Direct: %w", err)
	}
	v.Direct = altpkg.MyBytes(tempDirect)

	tempAnother, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode Another: %w", err)
	}
	v.Another = altpkg.AnotherString(tempAnother)

	if err := v.MyInterface.Decode(dec); err != nil {
		return fmt.Errorf("failed to decode MyInterface: %w", err)
	}

	tempMultiDepth, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode MultiDepth: %w", err)
	}
	v.MultiDepth = altpkg.MultiDepthAlias(tempMultiDepth)

	if err := v.ExportedPrivate.Decode(dec); err != nil {
		return fmt.Errorf("failed to decode ExportedPrivate: %w", err)
	}

	return nil
}

var _ xdr.Codec = (*CrossPackageTest)(nil)
