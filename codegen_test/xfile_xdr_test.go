//go:build ignore

// Code generated by xdrgen. DO NOT EDIT.
// Source: /Users/m/skratch/go-xdr/codegen_test/xfile_test.go
// Generated: 2025-07-18T17:26:22-07:00

package codegen_test

import (
	"fmt"
	"github.com/tempusfrangit/go-xdr"
)

func (v *CrossFileStruct) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeUint32(v.ID); err != nil {
		return fmt.Errorf("failed to encode ID: %w", err)
	}

	if err := enc.EncodeString(v.Name); err != nil {
		return fmt.Errorf("failed to encode Name: %w", err)
	}

	return nil
}
func (v *CrossFileStruct) Decode(dec *xdr.Decoder) error {

	tempID, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode ID: %w", err)
	}
	v.ID = tempID

	tempName, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode Name: %w", err)
	}
	v.Name = tempName

	return nil
}

var _ xdr.Codec = (*CrossFileStruct)(nil)

func (v *TestCrossFileArray) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeUint32(uint32(len(v.Items))); err != nil {
		return fmt.Errorf("failed to encode Items length: %w", err)
	}
	for _, elem := range v.Items {

		if err := elem.Encode(enc); err != nil {
			return fmt.Errorf("failed to encode element: %w", err)
		}

	}

	if err := enc.EncodeUint32(v.Count); err != nil {
		return fmt.Errorf("failed to encode Count: %w", err)
	}

	return nil
}
func (v *TestCrossFileArray) Decode(dec *xdr.Decoder) error {

	ItemsLen, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode Items length: %w", err)
	}
	v.Items = make([]CrossFileStruct, ItemsLen)
	for i := range v.Items {

		if err := v.Items[i].Decode(dec); err != nil {
			return fmt.Errorf("failed to decode element: %w", err)
		}

	}

	tempCount, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode Count: %w", err)
	}
	v.Count = tempCount

	return nil
}

var _ xdr.Codec = (*TestCrossFileArray)(nil)

func (v *TestCrossFileStruct) Encode(enc *xdr.Encoder) error {

	if err := v.Data.Encode(enc); err != nil {
		return fmt.Errorf("failed to encode Data: %w", err)
	}

	if err := enc.EncodeBool(v.Flag); err != nil {
		return fmt.Errorf("failed to encode Flag: %w", err)
	}

	return nil
}
func (v *TestCrossFileStruct) Decode(dec *xdr.Decoder) error {

	if err := v.Data.Decode(dec); err != nil {
		return fmt.Errorf("failed to decode Data: %w", err)
	}

	tempFlag, err := dec.DecodeBool()
	if err != nil {
		return fmt.Errorf("failed to decode Flag: %w", err)
	}
	v.Flag = tempFlag

	return nil
}

var _ xdr.Codec = (*TestCrossFileStruct)(nil)
