//go:build ignore

// Code generated by xdrgen. DO NOT EDIT.
// Source: /Users/m/skratch/go-xdr/codegen_test/cross_file_payloads_test.go
// Generated: 2025-07-18T17:26:22-07:00

package codegen_test

import (
	"fmt"
	"github.com/tempusfrangit/go-xdr"
)

func (v *TextMessage) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeString(v.Content); err != nil {
		return fmt.Errorf("failed to encode Content: %w", err)
	}

	return nil
}
func (v *TextMessage) Decode(dec *xdr.Decoder) error {

	tempContent, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode Content: %w", err)
	}
	v.Content = tempContent

	return nil
}

var _ xdr.Codec = (*TextMessage)(nil)

func (v *DataMessage) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeBytes(v.Bytes); err != nil {
		return fmt.Errorf("failed to encode Bytes: %w", err)
	}

	return nil
}
func (v *DataMessage) Decode(dec *xdr.Decoder) error {

	tempBytes, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode Bytes: %w", err)
	}
	v.Bytes = tempBytes

	return nil
}

var _ xdr.Codec = (*DataMessage)(nil)

func (v *TextMessagePayload) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeString(v.Content); err != nil {
		return fmt.Errorf("failed to encode Content: %w", err)
	}

	return nil
}
func (v *TextMessagePayload) Decode(dec *xdr.Decoder) error {

	tempContent, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode Content: %w", err)
	}
	v.Content = tempContent

	return nil
}

var _ xdr.Codec = (*TextMessagePayload)(nil)

func (v *DataMessagePayload) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeBytes(v.Bytes); err != nil {
		return fmt.Errorf("failed to encode Bytes: %w", err)
	}

	return nil
}
func (v *DataMessagePayload) Decode(dec *xdr.Decoder) error {

	tempBytes, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode Bytes: %w", err)
	}
	v.Bytes = tempBytes

	return nil
}

var _ xdr.Codec = (*DataMessagePayload)(nil)
