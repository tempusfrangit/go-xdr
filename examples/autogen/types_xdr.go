
// Code generated by xdrgen. DO NOT EDIT.
// Source: /Users/m/skratch/go-xdr/examples/autogen/types.go
// Generated: 2025-07-12T18:19:11-07:00

package main

import (
	"fmt"
	"github.com/tempusfrangit/go-xdr"
	
)

func (v *Person) Encode(enc *xdr.Encoder) error {
	
	if err := enc.EncodeUint32(v.ID); err != nil {
	return fmt.Errorf("failed to encode ID: %w", err)
}
	
	if err := enc.EncodeString(v.Name); err != nil {
	return fmt.Errorf("failed to encode Name: %w", err)
}
	
	if err := enc.EncodeUint32(v.Age); err != nil {
	return fmt.Errorf("failed to encode Age: %w", err)
}
	
	if err := enc.EncodeString(v.Email); err != nil {
	return fmt.Errorf("failed to encode Email: %w", err)
}
	
	return nil
}

func (v *Person) Decode(dec *xdr.Decoder) error {
	
	tempID, err := dec.DecodeUint32()
if err != nil {
	return fmt.Errorf("failed to decode ID: %w", err)
}
v.ID = tempID
	
	tempName, err := dec.DecodeString()
if err != nil {
	return fmt.Errorf("failed to decode Name: %w", err)
}
v.Name = tempName
	
	tempAge, err := dec.DecodeUint32()
if err != nil {
	return fmt.Errorf("failed to decode Age: %w", err)
}
v.Age = tempAge
	
	tempEmail, err := dec.DecodeString()
if err != nil {
	return fmt.Errorf("failed to decode Email: %w", err)
}
v.Email = tempEmail
	
	return nil
}

var _ xdr.Codec = (*Person)(nil)

func (v *Company) Encode(enc *xdr.Encoder) error {
	
	if err := enc.EncodeString(v.Name); err != nil {
	return fmt.Errorf("failed to encode Name: %w", err)
}
	
	if err := enc.EncodeUint32(v.Founded); err != nil {
	return fmt.Errorf("failed to encode Founded: %w", err)
}
	
	if err := v.CEO.Encode(enc); err != nil {
	return fmt.Errorf("failed to encode CEO: %w", err)
}
	
	if err := enc.EncodeUint32(uint32(len(v.Employees))); err != nil {
	return fmt.Errorf("failed to encode Employees length: %w", err)
}
for i := range v.Employees {
	if err := v.Employees[i].Encode(enc); err != nil {
	return fmt.Errorf("failed to encode Employees[i]: %w", err)
}
}
	
	return nil
}

func (v *Company) Decode(dec *xdr.Decoder) error {
	
	tempName, err := dec.DecodeString()
if err != nil {
	return fmt.Errorf("failed to decode Name: %w", err)
}
v.Name = tempName
	
	tempFounded, err := dec.DecodeUint32()
if err != nil {
	return fmt.Errorf("failed to decode Founded: %w", err)
}
v.Founded = tempFounded
	
	if err := v.CEO.Decode(dec); err != nil {
	return fmt.Errorf("failed to decode CEO: %w", err)
}
	
	EmployeesLen, err := dec.DecodeUint32()
if err != nil {
	return fmt.Errorf("failed to decode Employees length: %w", err)
}
v.Employees = make([]Person, EmployeesLen)
for i := range v.Employees {
	if err := v.Employees[i].Decode(dec); err != nil {
	return fmt.Errorf("failed to decode Employees[i]: %w", err)
}
}
	
	return nil
}

var _ xdr.Codec = (*Company)(nil)

func (v *ServerConfig) Encode(enc *xdr.Encoder) error {
	
	if err := enc.EncodeString(v.Host); err != nil {
	return fmt.Errorf("failed to encode Host: %w", err)
}
	
	if err := enc.EncodeUint32(v.Port); err != nil {
	return fmt.Errorf("failed to encode Port: %w", err)
}
	
	if err := enc.EncodeBool(v.EnableTLS); err != nil {
	return fmt.Errorf("failed to encode EnableTLS: %w", err)
}
	
	if err := enc.EncodeUint32(v.MaxClients); err != nil {
	return fmt.Errorf("failed to encode MaxClients: %w", err)
}
	
	if err := enc.EncodeUint64(v.Timeout); err != nil {
	return fmt.Errorf("failed to encode Timeout: %w", err)
}
	
	if err := enc.EncodeString(v.LogLevel); err != nil {
	return fmt.Errorf("failed to encode LogLevel: %w", err)
}
	
	if err := enc.EncodeUint32(uint32(len(v.Features))); err != nil {
	return fmt.Errorf("failed to encode Features length: %w", err)
}
for i := range v.Features {
	if err := v.Features[i].Encode(enc); err != nil {
	return fmt.Errorf("failed to encode Features[i]: %w", err)
}
}
	
	if err := enc.EncodeBytes(v.Metadata); err != nil {
	return fmt.Errorf("failed to encode Metadata: %w", err)
}
	
	return nil
}

func (v *ServerConfig) Decode(dec *xdr.Decoder) error {
	
	tempHost, err := dec.DecodeString()
if err != nil {
	return fmt.Errorf("failed to decode Host: %w", err)
}
v.Host = tempHost
	
	tempPort, err := dec.DecodeUint32()
if err != nil {
	return fmt.Errorf("failed to decode Port: %w", err)
}
v.Port = tempPort
	
	tempEnableTLS, err := dec.DecodeBool()
if err != nil {
	return fmt.Errorf("failed to decode EnableTLS: %w", err)
}
v.EnableTLS = tempEnableTLS
	
	tempMaxClients, err := dec.DecodeUint32()
if err != nil {
	return fmt.Errorf("failed to decode MaxClients: %w", err)
}
v.MaxClients = tempMaxClients
	
	tempTimeout, err := dec.DecodeUint64()
if err != nil {
	return fmt.Errorf("failed to decode Timeout: %w", err)
}
v.Timeout = tempTimeout
	
	tempLogLevel, err := dec.DecodeString()
if err != nil {
	return fmt.Errorf("failed to decode LogLevel: %w", err)
}
v.LogLevel = tempLogLevel
	
	FeaturesLen, err := dec.DecodeUint32()
if err != nil {
	return fmt.Errorf("failed to decode Features length: %w", err)
}
v.Features = make([]string, FeaturesLen)
for i := range v.Features {
	if err := v.Features[i].Decode(dec); err != nil {
	return fmt.Errorf("failed to decode Features[i]: %w", err)
}
}
	
	tempMetadata, err := dec.DecodeBytes()
if err != nil {
	return fmt.Errorf("failed to decode Metadata: %w", err)
}
v.Metadata = tempMetadata
	
	return nil
}

var _ xdr.Codec = (*ServerConfig)(nil)

