// Code generated by xdrgen. DO NOT EDIT.
// Source: types.go
// Generated 1 XDR types

package main

import (
	"fmt"
	"github.com/tempusfrangit/go-xdr"
)

func (v *User) Encode(enc *xdr.Encoder) error {

	if err := enc.EncodeString(string(v.ID)); err != nil {
		return fmt.Errorf("failed to encode ID: %w", err)
	}

	if err := enc.EncodeBytes([]byte(v.Session)); err != nil {
		return fmt.Errorf("failed to encode Session: %w", err)
	}

	if err := enc.EncodeUint32(uint32(v.Status)); err != nil {
		return fmt.Errorf("failed to encode Status: %w", err)
	}

	if err := enc.EncodeUint64(uint64(v.Flags)); err != nil {
		return fmt.Errorf("failed to encode Flags: %w", err)
	}

	if err := enc.EncodeInt32(int32(v.Priority)); err != nil {
		return fmt.Errorf("failed to encode Priority: %w", err)
	}

	if err := enc.EncodeInt64(int64(v.Created)); err != nil {
		return fmt.Errorf("failed to encode Created: %w", err)
	}

	if err := enc.EncodeBool(bool(v.Active)); err != nil {
		return fmt.Errorf("failed to encode Active: %w", err)
	}

	return nil
}

func (v *User) Decode(dec *xdr.Decoder) error {

	tempID, err := dec.DecodeString()
	if err != nil {
		return fmt.Errorf("failed to decode ID: %w", err)
	}
	v.ID = UserID(tempID)

	tempSession, err := dec.DecodeBytes()
	if err != nil {
		return fmt.Errorf("failed to decode Session: %w", err)
	}
	v.Session = SessionID(tempSession)

	tempStatus, err := dec.DecodeUint32()
	if err != nil {
		return fmt.Errorf("failed to decode Status: %w", err)
	}
	v.Status = StatusCode(tempStatus)

	tempFlags, err := dec.DecodeUint64()
	if err != nil {
		return fmt.Errorf("failed to decode Flags: %w", err)
	}
	v.Flags = Flags(tempFlags)

	tempPriority, err := dec.DecodeInt32()
	if err != nil {
		return fmt.Errorf("failed to decode Priority: %w", err)
	}
	v.Priority = Priority(tempPriority)

	tempCreated, err := dec.DecodeInt64()
	if err != nil {
		return fmt.Errorf("failed to decode Created: %w", err)
	}
	v.Created = Timestamp(tempCreated)

	tempActive, err := dec.DecodeBool()
	if err != nil {
		return fmt.Errorf("failed to decode Active: %w", err)
	}
	v.Active = IsActive(tempActive)

	return nil
}

var _ xdr.Codec = (*User)(nil)
