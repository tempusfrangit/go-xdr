name: Test

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    needs: [lint, xdrgen-test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22', '1.23', '1.24']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build xdrgen tool
      run: make build
    
    - name: Generate all XDR code (including codegen_test)
      run: make generate-all
    
    - name: Run tests (including codegen tests)
      run: make test
    
    - name: Run tests with race detection
      run: make test-race
    
    - name: Test examples work correctly
      run: make examples
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    
    - name: Run gci and check for unformatted files
      run: |
        go install github.com/daixiang0/gci@latest
        "$(go env GOPATH)/bin/gci" write \
          --skip-generated \
          -s standard \
          -s default \
          -s "prefix(github.com/tempusfrangit/xdr-go)" \
          .
        if ! git diff --exit-code; then
          echo "Code is not formatted. Run 'gci write .' locally to fix."
          exit 1
        fi
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8.0.0
      with:
        version: latest

  xdrgen-lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    
    - name: Run gci on xdrgen and check for unformatted files
      run: |
        go install github.com/daixiang0/gci@latest
        cd tools/xdrgen
        "$(go env GOPATH)/bin/gci" write \
          --skip-generated \
          -s standard \
          -s default \
          -s "prefix(github.com/tempusfrangit/go-xdr/tools/xdrgen)" \
          .
        if ! git diff --exit-code; then
          echo "xdrgen code is not formatted. Run 'gci write .' locally in tools/xdrgen to fix."
          exit 1
        fi
    
    - name: Run golangci-lint on xdrgen
      uses: golangci/golangci-lint-action@v8.0.0
      with:
        version: latest
        working-directory: tools/xdrgen

  xdrgen-test:
    needs: xdrgen-lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22', '1.23', '1.24']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Download xdrgen dependencies
      run: |
        cd tools/xdrgen
        go mod download
    
    - name: Test xdrgen
      run: |
        cd tools/xdrgen
        go test -v ./...
    
    - name: Test xdrgen with race detection
      run: |
        cd tools/xdrgen
        go test -race -v ./...

  build:
    needs: [lint, xdrgen-lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22', '1.23', '1.24']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Build xdrgen
      run: |
        cd tools/xdrgen
        go build -o ../../xdrgen .
    
    - name: Test xdrgen help
      run: ./xdrgen --help
    
    - name: Test xdrgen on examples
      run: |
        cd examples/autogen
        ../../xdrgen types.go
        if [ ! -f types_xdr.go ]; then
          echo "xdrgen failed to generate types_xdr.go"
          exit 1
        fi
        go build .

  verify-codegen:
    name: Verify Code Generation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Build xdrgen tool
      run: make build
    
    - name: Clean generated files
      run: |
        find . -name "*_xdr*.go" -type f -delete
        find . -name "*_xdr.go" -type f -delete
    
    - name: Regenerate all XDR code
      run: make generate-all
    
    - name: Check for uncommitted changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code generation produced changes:"
          git status --porcelain
          git diff
          exit 1
        fi
        echo "Code generation is up to date"

  test-synthetic-modules:
    name: Test Synthetic Cross-Package Resolution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Build xdrgen tool
      run: make build
    
    - name: Test synthetic test module
      run: |
        cd synthetic_test
        go mod tidy
        ../bin/xdrgen consumer/types.go
        go build ./...
        echo "Cross-package type resolution working correctly"

  test-go-workspace:
    name: Test Go Workspace
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Test workspace sync
      run: go work sync
    
    - name: Verify workspace structure
      run: |
        echo "Workspace modules:"
        go list -m
        echo "Testing workspace compilation..."
        go build ./...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Check for vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
        cd tools/xdrgen && govulncheck ./...

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Build xdrgen tool
      run: make build
    
    - name: Generate all XDR code
      run: make generate-all
    
    - name: Run tests with coverage
      run: |
        go test -race -coverprofile=coverage.out -covermode=atomic ./...
        cd tools/xdrgen && go test -race -coverprofile=coverage-tools.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out,./tools/xdrgen/coverage-tools.out
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}