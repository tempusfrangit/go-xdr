name: Test

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22', '1.23', '1.24']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run tests with race detection
      run: go test -race -v ./...
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    
    - name: Run gci and check for unformatted files
      run: |
        go install github.com/daixiang0/gci@latest
        "$(go env GOPATH)/bin/gci" write \
          --skip-generated \
          -s standard \
          -s default \
          -s "prefix(github.com/tempusfrangit/xdr-go)" \
          .
        if ! git diff --exit-code; then
          echo "Code is not formatted. Run 'gci write .' locally to fix."
          exit 1
        fi
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8.0.0
      with:
        version: latest

  build:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22', '1.23', '1.24']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Build xdrgen
      run: |
        cd tools/xdrgen
        go build -o ../../xdrgen .
    
    - name: Test xdrgen help
      run: ./xdrgen --help
    
    - name: Test xdrgen on examples
      run: |
        cd examples/autogen
        ../../xdrgen -s types.go
        if [ ! -f types_xdr.go ]; then
          echo "xdrgen failed to generate types_xdr.go"
          exit 1
        fi
        go build .